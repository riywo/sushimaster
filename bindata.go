package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _sushibox_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x5d\x4f\xe4\x36\x14\x7d\x9e\xfc\x0a\x37\xd2\x48\x9e\x32\x0d\xec\xc3\xaa\xd2\x54\xf3\x00\x85\x95\xa8\xb4\x2b\x04\xdb\xbe\xb0\x08\x99\xc4\x99\xb1\x48\xec\xc8\xf6\xa4\x6c\xd1\xfc\xf7\xde\xeb\x8f\xc4\xa1\xc3\x0a\xfa\x42\xb0\x7d\xee\xb9\xd7\xf7\xe3\x78\x3a\x56\x3e\xb2\x0d\x27\x2d\x13\x32\xcb\x44\xdb\x29\x6d\x09\xcd\x66\x79\xdd\xb0\x4d\x8e\xdf\xd6\xe2\x67\x23\xec\x76\xf7\x50\x94\xaa\x3d\x6e\x85\x2d\xb7\xbc\x69\xb6\xc7\x1b\xf5\xcb\x56\xb5\xbc\x12\x1a\x21\x42\x1d\x0b\xb5\xb3\xa2\xc1\x85\x32\xf8\xb7\x63\x76\x7b\x5c\x8b\x86\xe3\x3f\xb8\x61\xbe\x9b\x92\x35\x80\x58\x64\x59\xcf\x34\xb9\xd9\x99\xad\x38\x53\x4f\xe7\x42\x93\x35\xc9\x0b\x83\xeb\x07\xf5\x94\xbb\xd3\xbf\xb8\x36\x42\x49\x13\x4e\xfb\xb0\xcc\xbd\xed\x19\x33\xdc\x9f\x04\x9c\xdf\x15\x32\xc0\x1f\x84\x04\x64\xbd\x93\xa5\xbb\x1d\x5d\x90\xe7\x6c\x26\x6a\xc2\xb5\x26\xab\x35\x11\x52\x58\x40\x1a\xba\xf8\xcd\x6d\xfd\xb4\x26\x52\x34\x88\x99\xc1\x52\xe9\x8b\x27\x61\x69\x1e\x51\xa4\x66\x70\x8d\x8a\x3c\x7c\x27\xf3\xa3\x3e\x5f\xa2\xc9\x22\x9b\xed\xb3\x6c\x56\xb6\xd5\x92\x30\xbd\x31\xc8\xda\x31\x6d\xf8\x29\x2c\x28\xdc\x30\xf1\x06\x19\x2b\x1f\x3f\x01\x85\xb9\x94\xb5\x3a\xe0\x33\x40\xd7\x44\x73\x63\x95\xe6\x0e\x7b\x00\x97\x06\x97\x42\x5f\x09\x10\x22\x74\x41\x8e\x91\xf0\x27\x5e\xfe\xde\x56\x74\x08\xfb\x87\xf7\x0f\x68\x32\xff\xaf\x03\x47\x10\xd3\xb0\x0f\x99\x1e\xb3\x4a\x1c\x0b\xf2\x85\x1e\x59\xc6\x08\xc2\xba\x00\x1c\x64\x29\x86\x96\xf8\xd7\xdc\xee\xb4\xc4\x5d\xa4\x9e\x4d\x9b\x24\xb6\x53\xf1\x87\x82\xa2\x0e\xdc\x09\x08\x38\x7d\x2a\x95\x29\x3e\x3f\xc2\xe9\x69\xd3\xd0\xe4\x7c\x89\x07\x98\xb4\xcf\xaa\xe2\xf4\xe4\xd7\x8f\x1f\x17\x6f\x09\x63\xda\x8d\xd3\x30\x26\xec\x09\xf0\x60\x28\xc9\xf9\xff\x0b\x25\x9b\x8d\xbd\x3f\x8d\x63\x42\x1d\x40\x40\x38\x0c\xc5\x14\x1d\x00\xcb\x30\x34\x00\x0c\x7e\xc0\xed\x50\xd1\xa4\xa3\x09\x36\x0d\x31\x56\x0b\xb9\x09\x2d\x7f\x7b\xe7\x97\x6e\xb8\xf0\x34\xf1\x81\xf4\x14\xee\x87\xc6\xb7\x27\x77\x38\x10\xa8\x2a\xc5\x9f\x06\x15\x07\x80\x40\xef\xa7\x72\x06\x2a\x53\x5c\x01\x8f\xad\x69\xee\x8e\x57\xd8\x71\xb7\xaa\xb3\x78\x9b\x3b\x02\xba\xd3\x32\x59\x39\x9f\x45\x51\x7c\x93\xdf\xa4\xef\x40\x6c\x71\x47\xea\xac\xcf\x79\xcd\x76\x8d\xc5\xe1\xc3\x8a\xa1\x1e\x04\xd1\x40\x77\x08\x3b\x53\xaa\xa1\x51\x49\x80\xa2\x66\x8d\xe1\x4b\x92\x9b\xad\xfa\x3b\x62\xf3\x21\xd2\x2b\xbc\x3b\x92\xb9\xbb\x06\x8a\x74\xba\x7f\x8e\xf4\x2f\x2f\x31\x37\x2e\xc2\x50\x0f\x8c\x12\x12\xe1\x46\xea\x64\x31\x4c\xa4\xcb\x17\x28\xd5\xa0\x7a\x51\x09\x1a\x2e\xa9\x1b\x4d\x3c\x3e\xf1\x73\x3f\xa6\x0e\x03\x1a\xf9\x3e\x84\x29\x4f\x74\x68\xed\x3e\x90\x72\xbf\xbe\xfd\xb0\xba\xf3\x3e\x7d\x79\x87\xd2\xbe\x14\xa5\x71\x64\x6b\xf8\xdc\x2f\x89\x64\x2d\xc7\x89\xd5\x4c\x42\xc5\x4e\x8d\xe1\xf6\x0b\x6c\x99\x50\x35\x86\x1b\x02\x4c\x87\xd1\x76\x10\x47\x86\xa6\x8b\x51\xd7\x52\x05\x4b\x9b\xd9\x85\x35\xc3\x76\x41\xf3\x57\xda\x33\x72\xe1\xf1\x65\xea\x0e\x72\x70\x63\x99\xa5\x68\xf3\x66\x67\x00\x1a\x02\x2f\x6e\xc4\x3f\x90\x4f\xb4\x88\xe4\x71\x2b\xb5\xc6\xca\x5e\x60\x6e\xa0\xb2\x2e\x69\x04\x8d\x43\xba\xe6\x66\x45\x0c\xd8\x10\x61\x48\x25\xea\x9a\x6b\x2e\x2d\xd4\x3e\x06\xb5\x7f\xe9\xd3\xcd\xfa\xd4\x67\xd8\x7a\x97\xcf\x16\x6c\xde\xe3\xf3\xab\x68\x0f\xb8\x0d\xbb\xef\xf3\x6c\xc1\xe8\x07\xae\xf7\x07\x85\x64\xfa\xb0\x8d\xbd\x66\x79\xdb\x9d\x27\xcf\x83\xff\x11\x51\x7c\xf5\xdb\x34\xc7\x29\x85\x88\x6e\xba\x30\x5a\x71\x5a\xee\xe7\xe6\x3e\x19\xb1\xb7\x48\x78\xc5\x21\xdc\x54\x77\xa0\x81\xae\x79\xab\x7a\x8e\xba\x1c\x02\xc1\xf9\x74\xf3\xed\x95\xfb\xda\x87\xed\x3a\xdb\xd0\x21\xd8\x3c\x7f\x93\x50\x0f\xea\x7f\xcd\xb1\x8b\x47\xfb\x51\x9c\x81\x04\xce\x2f\xcd\x17\x65\x61\xa0\x8d\xa5\xf8\xa6\x1e\x24\x0b\xeb\x97\x63\x3b\x64\x38\x79\xda\x5f\x53\xe9\x21\xeb\x80\xb9\x3a\x3c\x75\xee\x2d\x88\xe2\x0a\xe6\x3d\x62\x58\xd7\x71\x59\xd1\x48\xf4\x1c\xcc\xf7\xcb\x28\xc9\xf8\xd2\xc9\xbe\x0f\x53\x79\x21\x7b\xa1\x95\xa4\xe3\x93\x12\x7e\xf9\x81\x66\xf1\x92\x06\x6b\x67\xdc\x43\xe1\xc1\x30\xb9\xc5\xf0\xeb\x03\x54\xa8\x65\x76\xbc\x0a\x01\x3f\xd0\x03\x5c\xd7\xac\xe4\xcf\x7b\x97\x24\x6c\x8d\x4f\xa1\x35\x9c\x1c\x54\x60\x0f\xe5\x71\x0d\xbc\x22\xf9\x91\x27\x39\xca\x9d\x1e\x33\x1f\x69\xa2\x9d\xfb\xec\xdf\x00\x00\x00\xff\xff\x51\x73\xff\xe1\x03\x0b\x00\x00")

func sushibox_go_bytes() ([]byte, error) {
	return bindata_read(
		_sushibox_go,
		"sushibox.go",
	)
}

func sushibox_go() (*asset, error) {
	bytes, err := sushibox_go_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "sushibox.go", size: 2819, mode: os.FileMode(420), modTime: time.Unix(1418056509, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _version_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\xce\xcf\x2b\x2e\x51\x08\x4b\x2d\x2a\xce\xcc\xcf\x53\xb0\x55\x50\x4a\x49\x2d\x4b\xcd\xc9\x2f\xc8\xcc\x4b\x57\xe2\x02\x04\x00\x00\xff\xff\x21\xcf\xe4\x49\x2b\x00\x00\x00")

func version_go_bytes() ([]byte, error) {
	return bindata_read(
		_version_go,
		"version.go",
	)
}

func version_go() (*asset, error) {
	bytes, err := version_go_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "version.go", size: 43, mode: os.FileMode(384), modTime: time.Unix(1418000054, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sushibox.go": sushibox_go,
	"version.go": version_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"sushibox.go": &_bintree_t{sushibox_go, map[string]*_bintree_t{
	}},
	"version.go": &_bintree_t{version_go, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

