package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _sushibox_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xdf\x6f\xdb\x36\x10\x7e\xb6\xfe\x0a\x4e\x80\x01\xba\xf1\x94\xf4\xa1\x18\xe0\xc1\x0f\xc9\x92\x62\x19\xd0\xa2\x48\xba\xbd\xa4\x41\xc0\x48\x94\x4d\x44\x22\x0d\x92\xf6\xd2\x05\xfe\xdf\x77\x77\x22\x65\x5a\x75\x82\xa4\x2f\x71\x44\xdd\xf7\xdd\xaf\xef\x8e\x5a\x89\xf2\x41\x2c\x24\x6b\x85\xd2\x59\xa6\xda\x95\xb1\x9e\xf1\x6c\x94\xd7\x8d\x58\xe4\xf8\xdb\x7a\xfc\x59\x28\xbf\x5c\xdf\x17\xa5\x69\x8f\x5b\xe5\xcb\xa5\x6c\x9a\xe5\xf1\xc2\xfc\xba\x34\xad\xac\x94\x45\x13\x65\x8e\x95\x59\x7b\xd5\xe0\x83\x71\xf8\x77\x25\xfc\xf2\xb8\x56\x8d\xc4\x7f\xf0\xc0\x7d\x77\xa5\x68\xc0\x62\x92\x65\x1b\x61\xd9\x9f\x00\x3f\x57\x96\xcd\xd9\xb2\xfb\x8f\x4f\xe8\xfc\x7a\xed\x96\xea\xcc\x3c\xe2\x3b\xe7\xad\xd2\x0b\x3a\xfe\x47\x5a\xa7\x8c\x76\x83\xe3\x33\xe1\xe4\xf0\x48\xe9\xe4\x24\xab\xd7\xba\xa4\x1c\xf9\x84\x3d\x65\x23\x55\x33\x69\x2d\x9b\xcd\x99\xd2\xca\x83\xa1\xe3\x93\xdf\xe9\xe8\x97\x39\xd3\xaa\x41\x9b\x11\x3c\x1a\x7b\xf1\xa8\x3c\xcf\xa3\x15\xab\x05\x24\x53\xb1\xfb\xef\x6c\x7c\xb4\xc9\xa7\x08\x99\x64\xa3\x6d\x96\x8d\xca\xb6\x9a\x32\x61\x17\x6e\x1a\xa9\x57\xc2\x3a\x79\x0a\x27\x90\x13\x7a\x7c\xb7\xe9\xa2\x27\x72\xe3\x0a\xa2\x3e\x21\x78\x0c\xe8\xb0\xf7\x9e\xe8\x05\xf7\xbb\x8c\xa0\x37\xe5\xc3\x47\xb0\x73\x97\xba\x36\x07\xf2\x0a\xa6\x73\x66\xa5\xf3\xc6\x4a\xb2\x3d\x60\x97\x86\x90\x9a\x3e\x13\x05\xa6\xb1\x1f\x89\x7c\x94\xe5\x1f\x6d\xc5\xfb\xd2\xbc\x58\xe3\x60\xcd\xc6\x3f\x3a\x20\x82\x98\xeb\x36\x74\xb3\x17\x4c\x68\x32\xf2\x05\x35\xf6\x2d\x08\xcf\x45\x27\xac\x97\xab\x1c\xf8\x9e\xad\xf1\xc8\x4a\xbf\xb6\x3a\x72\xf6\x71\xec\x14\xc4\x88\x0d\x79\x53\xf9\xce\x59\x1c\x80\xe2\x2f\x03\x02\x0c\x92\x9f\xb2\xbc\x70\x68\x76\x6f\x1e\x73\x70\x90\x4a\x7b\x08\x49\xe8\x00\x16\x64\xe4\x00\x95\x8d\x42\xa2\x20\xa7\x4f\x0f\x10\xd5\x69\xd3\xec\x5b\xc3\x0b\x6c\xda\x27\x53\x49\x7e\xf2\xdb\x87\x0f\x93\x83\x65\x08\xa9\xc1\x29\x65\xda\xc9\x23\xe5\x4c\xa2\xfb\x39\xce\x6c\x14\x87\x74\x98\xdc\x1e\x75\x78\x00\xc2\x30\xc0\x43\xeb\xc0\x02\x65\xb8\x57\x1a\xeb\x16\xdc\x80\x57\xec\x08\x8e\x7e\x1c\x33\x80\xc2\x0e\x2b\xce\x8c\x69\x78\x2c\x1a\xf4\xb3\x16\x8d\x93\x80\x77\x4b\xf3\x6f\xb4\xc5\x52\x52\x33\x93\x99\x65\xa8\xdb\xa0\xad\x4e\xbe\xec\xe6\x36\x3e\x62\xae\xd4\x6d\x5a\x27\xbd\xc0\xd3\x70\x31\x52\x0e\xa5\x42\xb6\x9b\x93\xdb\x09\xd5\x8d\x1e\xde\xcf\x6e\xb3\xd1\xbb\x24\x4c\x8c\x88\x4a\x88\x1e\xe7\x73\x88\x2d\x0a\x83\x2a\x49\x69\xfc\xed\x70\x4d\x83\x31\x84\xd9\x2d\x31\x78\xd1\xfa\xe2\x0b\x04\xe4\x6b\x9e\xd3\xfb\x19\x4e\xcf\x8d\x59\x79\x2c\xe8\x2d\x83\x6d\xdd\x0a\x5d\x51\x68\x45\x51\x7c\xd3\xdf\x74\x37\x4d\x13\x42\x23\x2d\xc1\xcf\x65\x2d\xd6\x8d\xa7\x45\x45\xbd\x0a\xef\xb0\x18\x1c\x55\xf6\xc3\xfa\xda\x73\x3d\x76\xc4\xbb\xeb\x5d\x6c\x7e\x64\x03\x74\x23\x35\xa7\x15\x80\xf9\x9d\x04\x8e\x3e\x2f\x72\x1c\x64\x87\xcc\x17\x58\x5a\x60\x6e\x95\x73\x38\xda\x88\xcc\x29\x38\x26\xa1\x56\x1d\x7c\xaf\xea\x48\xd5\xf5\x0d\x6a\x3d\xdd\x7b\xa6\x72\x77\xdb\x29\xc6\x15\x67\x77\xb8\x2b\x77\x13\x5c\xc3\xcf\xdd\x94\x69\xd1\x4a\x9c\x2f\x2b\x34\x54\xff\xd4\x39\xe9\x3f\xc3\x91\x0b\x1d\x10\x78\xa0\x00\xda\x6f\x1c\x32\x21\x32\x84\x4e\x76\xeb\x36\x5d\xac\xe9\x68\x74\x15\x42\xc5\x20\xfc\x19\xb1\x47\x2e\x7c\x7d\x99\xba\x03\x49\x5d\x7b\xe1\x39\x62\x5e\xed\x0c\x8c\xfa\xc0\x8b\x6b\xf5\x1f\x94\x1f\x11\x91\x3c\x1e\xa5\xe8\xb4\x29\x54\x34\x86\xe0\x50\xae\xb1\x9b\x31\x07\x18\xa6\x1c\xab\x54\x5d\x4b\x2b\xb5\x07\x41\xc4\xa0\xb6\x43\x9f\xb4\x39\xf6\x7d\x86\xa3\x37\xf9\x6c\x01\xf3\x16\x9f\x5f\x55\x7b\xc0\x6d\x38\x7d\x9b\x67\x0f\xa0\x17\x5c\x6f\x87\x7b\x89\xd4\xb6\x7f\xdf\xee\xb4\xe6\x65\xbb\x3a\x4f\x6e\xad\xee\x2b\xaa\xf8\xda\x1d\xf3\x1c\x97\x16\x44\x74\xbd\x0a\xf3\x16\xb7\xc3\xdd\xd8\xdd\x25\x73\xf7\x9a\xcd\x5e\x49\x08\x37\xdd\x21\x20\xa0\x2b\xd9\x9a\x8d\xc4\x2d\x1f\x02\xc1\xeb\x8e\xc7\xcb\x65\xce\xae\xba\xb0\x49\xd9\x8e\xf7\xc1\xe6\xf9\xab\xd6\x7e\x7f\x97\x5c\x49\x54\xf1\x0e\x1f\xc4\xdd\x91\xc0\xfb\x4b\xf7\xd9\x78\xb8\x8a\x9d\xe7\x78\xe5\x1e\x24\x0b\xcf\xc3\xb1\xed\x2b\x9c\x7c\x71\x1c\xde\xdc\x49\xd5\xc1\xe6\xcb\xe1\xa9\xa3\x9b\x27\xee\x49\x80\x6f\xd0\x46\xac\x56\x52\x57\x3c\x12\x3d\x05\xf8\x76\x1a\xb7\x2b\xd8\x4a\xbd\xd9\x84\xa9\xbc\xd0\x1b\x65\x8d\xe6\xbb\x1b\x2a\x7c\xfa\xc2\x67\x9f\x2c\x79\x40\x13\x78\x03\x8d\x07\x60\x92\x45\xff\x51\x02\x5b\xa8\x15\x7e\x97\x0a\x03\x3f\xa0\x01\x69\x6b\x51\xca\xa7\x2d\x15\x09\xa5\xf1\x31\x48\x83\xd6\x41\x05\x78\x68\x0f\x09\x78\xc6\xf2\xa3\x8e\xe4\x28\xa7\x25\x2d\xba\x48\xe3\xe7\xe7\x7b\xf4\xfa\x7f\x00\x00\x00\xff\xff\x51\x53\x23\x73\x04\x0c\x00\x00")

func sushibox_go_bytes() ([]byte, error) {
	return bindata_read(
		_sushibox_go,
		"sushibox.go",
	)
}

func sushibox_go() (*asset, error) {
	bytes, err := sushibox_go_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "sushibox.go", size: 3076, mode: os.FileMode(420), modTime: time.Unix(1418063838, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _version_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\xce\xcf\x2b\x2e\x51\x08\x4b\x2d\x2a\xce\xcc\xcf\x53\xb0\x55\x50\x4a\x49\x2d\x4b\xcd\xc9\x2f\xc8\xcc\x4b\x57\xe2\x02\x04\x00\x00\xff\xff\x21\xcf\xe4\x49\x2b\x00\x00\x00")

func version_go_bytes() ([]byte, error) {
	return bindata_read(
		_version_go,
		"version.go",
	)
}

func version_go() (*asset, error) {
	bytes, err := version_go_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "version.go", size: 43, mode: os.FileMode(384), modTime: time.Unix(1418000054, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sushibox.go": sushibox_go,
	"version.go": version_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"sushibox.go": &_bintree_t{sushibox_go, map[string]*_bintree_t{
	}},
	"version.go": &_bintree_t{version_go, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

