package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _sushibox_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x5f\x6f\xdb\x36\x10\x7f\x96\x3e\x05\x27\xc0\x18\xbd\x78\x4a\xfa\x50\x0c\xf0\xe0\x87\xa4\x49\xb1\x0c\x68\x51\x24\xdd\x5e\xd2\x20\x60\x24\xca\x26\x22\x91\x02\x49\x6b\xe9\x02\x7f\xf7\xdd\x51\xa4\x44\xab\x4e\x90\xec\xc5\x32\x8f\xf7\xf7\x77\x77\x3f\xa9\x65\xc5\x03\x5b\x73\xd2\x30\x21\xd3\x54\x34\xad\xd2\x96\xd0\x34\xc9\xaa\x9a\xad\x33\x7c\x36\x16\x1f\x6b\x61\x37\xdb\xfb\xbc\x50\xcd\x71\x23\x6c\xb1\xe1\x75\xbd\x39\x5e\xab\x5f\x37\xaa\xe1\xa5\xd0\xa8\x22\xd4\xb1\x50\x5b\x2b\x6a\x3c\x28\x83\xbf\x2d\xb3\x9b\xe3\x4a\xd4\x1c\xff\xa0\xc0\x7c\x37\x05\xab\x41\x63\x9e\xa6\x1d\xd3\xe4\x0f\x30\x3f\x17\x9a\xac\xc8\xa6\xff\x47\xe7\x4e\x7e\xbd\x35\x1b\x71\xa6\x1e\xf1\xce\x58\x2d\xe4\xda\x89\xff\xe6\xda\x08\x25\xcd\x44\x7c\xc6\x0c\x9f\x8a\x84\x8c\x24\x69\xb5\x95\x85\xab\x91\xce\xc9\x53\x9a\x88\x8a\x70\xad\xc9\x72\x45\x84\x14\x16\x14\x0d\x9d\xff\xee\x44\x3f\xad\x88\x14\x35\xea\x24\x70\x54\xfa\xe2\x51\x58\x9a\x05\x2d\x52\x31\x28\xa6\x24\xf7\xdf\xc9\xec\xa8\xcb\x16\x68\x32\x4f\x93\x5d\x9a\x26\x45\x53\x2e\x08\xd3\x6b\x83\x5e\x5b\xa6\x0d\x3f\x85\x03\x94\x13\x47\x03\xdc\x8a\x87\x8f\xe0\xc2\x5c\xca\x4a\x1d\x88\xe9\x55\x57\x44\x73\x63\x95\xe6\x4e\xf7\x80\x5e\x9c\x5c\xac\xfa\x4c\x82\x90\xa1\x4b\x72\xcc\x84\x3f\xf2\xe2\x43\x53\xd2\x21\xed\x17\xeb\xf7\xda\x64\xf6\x63\x00\xe7\x20\xc0\xb0\xf3\x48\x0f\xcd\xf4\x0d\x40\x7f\x7e\x52\x16\x21\x03\x7f\xce\xfb\xa6\x87\xd4\x0e\xc7\xff\xc0\xe4\xcf\x96\x54\x42\x96\xc1\xf5\x8f\x2d\x48\x34\xb7\x5b\x2d\x83\xdf\x21\x97\xb1\xc3\xc4\x79\x44\xdf\xf1\x78\xad\x48\x18\xd0\xfc\x4f\x05\x03\xe2\x47\x72\x41\xb2\xdc\xa0\xda\xbd\x7a\xcc\x20\x40\x3c\x7a\x53\x93\xc8\x1d\x98\x75\x5e\x33\xc3\xde\xfb\x62\x95\xc9\x3f\x3d\x40\x56\xa7\x75\xbd\xaf\x0d\x17\xd8\xb8\x4f\xaa\xe4\xf4\xe4\xb7\xf7\xef\xe7\x07\xa1\xf0\xa5\x81\xd4\x55\xda\x8f\x48\xec\x33\xca\xee\xff\xf9\x4c\x93\xb0\x44\xd3\xe2\xf6\x5c\xfb\x03\x38\xf4\x0b\x36\xd5\xf6\x5e\x00\x86\x7b\x21\x11\x37\x1f\x06\xa2\x62\x47\x70\x35\x3d\x3e\x68\x0a\x1c\x93\x9f\x29\x55\xd3\x00\x1a\xf4\xb3\x62\xb5\xe1\x60\x6f\x36\xea\x9f\xa0\x8b\x50\xba\x66\x46\x8b\x45\x70\x76\xfd\x7c\xf9\xcd\xbb\xb9\xed\x8f\x6e\xc7\xf1\x36\xca\x0e\x13\xa3\x80\x0c\x1a\xdf\x9c\xdc\x62\x6f\x5c\xf8\xbf\x0c\xd2\x1f\x28\x82\xfb\x9e\x1c\x12\xa0\xbc\xfc\x0b\xf8\xb1\x15\xcd\xdc\xf5\x12\x07\xff\x46\xb5\x16\x71\xb8\x25\x40\x82\x0d\x83\x51\xc4\x98\x79\x9e\x7f\x93\xdf\x64\xbf\x08\xb8\x69\xce\xa9\xb3\x3e\xe7\x15\xdb\xd6\x16\x39\xc0\x01\xdc\xdf\x60\x01\x28\x71\x09\x7b\x08\x62\xa6\xf8\x25\xc0\x33\xcd\x64\x66\x5c\x98\xb1\x03\x09\x54\xe3\xd6\xe3\x64\x3e\x6c\xb7\x2b\x7a\x05\xe0\x85\xc9\x0d\xac\x52\x73\x49\xdd\x9a\xe3\xf5\x49\xcf\x21\x63\xfd\x98\xd0\xe8\xef\x9d\x67\x8c\x88\xd3\x56\xee\x01\xb8\xf5\xe7\x9b\x77\xcb\xdb\x3e\x66\xdf\xde\x61\xd9\xa6\x04\x37\xae\x5c\x05\x8f\xbb\x05\x91\xac\xe1\xb8\x10\x9a\x49\x80\xfd\xd4\x18\x6e\x3f\x83\xc8\x78\xe8\x19\x0a\x04\x98\x0e\x34\xe1\x54\x9c\x33\x34\x9d\x8f\x1c\x19\xb3\x61\x3c\xcb\x2e\xad\x04\x7b\x8e\xe6\xcf\x4c\x67\xf0\x85\xd7\x97\x71\x38\xc0\xe0\xda\x32\x4b\xd1\xe6\xd5\xc1\x40\x69\x48\x3c\xbf\x16\xff\x02\x9e\x68\x11\x9c\x07\x51\x6c\x8d\x9d\xbd\x40\x6c\xa0\xb3\x0e\x34\x82\xc6\x1e\xae\x99\x59\x12\x03\x36\x44\x18\x52\x8a\xaa\xe2\x9a\x4b\x0b\xbd\x0f\x49\xed\xa6\x31\xdd\xaa\xef\xc7\xf4\xa2\x37\xc5\x6c\xc0\xe6\x2d\x31\xbf\x8a\xe6\x40\x58\x2f\x7d\x5b\x64\x0b\x46\x2f\x84\xde\x4d\x89\xc4\x4d\xdb\xfe\x4b\x72\x9c\x35\xcb\x9b\xf6\x3c\x7a\xd5\xf4\x9f\x25\xf9\xd7\x5e\x4c\x33\x64\x19\xc8\xe8\xba\xf5\xab\x15\xb6\xe5\x6e\x66\xee\xa2\x15\x7b\x0d\x15\x97\x1c\xd2\x8d\xc9\x03\x06\xe8\x8a\x37\xaa\xe3\x48\xcb\x3e\x11\xdc\x4f\x1a\xde\x06\x2b\x72\xd5\xa7\xed\x26\xdb\xd0\x21\xd9\x2c\x7b\x15\x4f\x0f\xe4\x7f\xc5\x71\x8a\x47\x7b\x3f\xdc\xbd\x13\xb8\xbf\x34\x9f\x95\x85\x85\x36\x96\xe2\x3b\xf2\xa0\x33\x7f\x9e\xae\xed\x80\x70\xf4\x99\xf0\x1c\xd5\x0e\xa8\x83\xce\x97\xc3\x5b\xe7\x5e\x15\x81\x21\xc1\xbc\x43\x1d\xd6\xb6\x5c\x96\x34\x38\x7a\xf2\xe6\xbb\x45\xe0\x55\xd0\xe5\xb2\xeb\xfc\x56\x5e\xc8\x4e\x68\x25\xe9\xf8\x4a\xf1\xdf\x92\xc0\x59\xbc\xa0\xde\xda\x19\x77\xd0\x78\x30\x8c\xaa\x18\xbe\x24\x80\x85\x1a\x66\xc7\x52\x08\xc4\x81\x19\xe0\xba\x62\x05\x7f\xda\x39\x90\x70\x34\x3e\xfa\xd1\x70\x74\x50\x82\x3d\xb4\xc7\x0d\xf0\x92\x64\x47\xbd\x93\xa3\xcc\xf1\x31\xeb\x33\x8d\xb8\x73\x97\xfe\x17\x00\x00\xff\xff\xa0\xd6\x08\x6a\x55\x0b\x00\x00")

func sushibox_go_bytes() ([]byte, error) {
	return bindata_read(
		_sushibox_go,
		"sushibox.go",
	)
}

func sushibox_go() (*asset, error) {
	bytes, err := sushibox_go_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "sushibox.go", size: 2901, mode: os.FileMode(420), modTime: time.Unix(1418059819, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _version_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\xce\xcf\x2b\x2e\x51\x08\x4b\x2d\x2a\xce\xcc\xcf\x53\xb0\x55\x50\x4a\x49\x2d\x4b\xcd\xc9\x2f\xc8\xcc\x4b\x57\xe2\x02\x04\x00\x00\xff\xff\x21\xcf\xe4\x49\x2b\x00\x00\x00")

func version_go_bytes() ([]byte, error) {
	return bindata_read(
		_version_go,
		"version.go",
	)
}

func version_go() (*asset, error) {
	bytes, err := version_go_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "version.go", size: 43, mode: os.FileMode(384), modTime: time.Unix(1418000054, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sushibox.go": sushibox_go,
	"version.go": version_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"sushibox.go": &_bintree_t{sushibox_go, map[string]*_bintree_t{
	}},
	"version.go": &_bintree_t{version_go, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

