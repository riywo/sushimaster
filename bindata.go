package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _sushibox_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x4d\x6f\xe3\x36\x10\x3d\x5b\xbf\x82\x15\x60\x80\xda\x75\x65\xef\x61\x51\xc0\x85\x0f\x49\x93\xa0\x29\x90\xc5\x22\xd9\xf6\x92\x35\x02\xda\xa2\x6c\x22\x12\x69\x90\xb4\x9b\x34\xf0\x7f\xef\x0c\x45\x4a\xb4\xea\x64\x9d\x5e\xe2\x68\x34\x1f\x6f\xde\x0c\x1f\xb5\x61\xcb\x47\xb6\xe2\xa4\x66\x42\x26\x89\xa8\x37\x4a\x5b\x42\x93\x41\x5a\x56\x6c\x95\xe2\x6f\x6d\xf1\x67\x25\xec\x7a\xbb\xc8\x97\xaa\x1e\xd7\xc2\x2e\xd7\xbc\xaa\xd6\xe3\x95\xfa\x79\xad\x6a\x5e\x08\x8d\x2e\x42\x8d\x85\xda\x5a\x51\xe1\x83\x32\xf8\x77\xc3\xec\x7a\x5c\x8a\x8a\xe3\x3f\x68\x30\xcf\x66\xc9\x2a\xf0\xc8\x92\x64\xc7\x34\xf9\x1d\xc2\x2f\x84\x26\x33\xb2\x6e\xfe\xa3\x99\xb3\xdf\x6d\xcd\x5a\x9c\xab\x27\x7c\x67\xac\x16\x72\xe5\xcc\x7f\x71\x6d\x84\x92\xa6\x67\x3e\x67\x86\xf7\x4d\x42\x46\x96\xa4\xdc\xca\xa5\xeb\x91\x66\xe4\x25\x19\x28\x93\x5f\x3e\x09\x4b\x35\x67\xd5\x8d\xb3\x66\xc9\xde\x7b\x75\x36\x22\xa4\x45\x6f\x51\x12\xae\x35\x99\xce\xc0\x20\x2c\xa4\x35\x34\xfb\xd5\x99\x7e\x9a\x11\x29\x2a\xf4\x19\x68\x6e\xb7\x5a\xa2\x55\x69\x97\x3b\x0d\xce\xa4\x64\xc0\x40\x41\x16\xcf\x64\xf8\x71\x97\x8e\xd0\x27\x4b\x06\x50\x6f\xb0\xac\x8b\x11\x61\x7a\x65\x46\xa1\xc2\x86\x69\xc3\xcf\xc0\x02\x44\x60\xe1\x0f\xbb\xa6\xe5\xb8\xc6\x04\x83\x03\xaa\x37\x21\xb4\xd9\xde\xc0\xd0\x75\x07\x53\x5d\x3e\x5e\x81\x9f\xb9\x96\xa5\x3a\xd2\xa3\x77\x9d\x01\x47\xc6\x2a\xcd\x9d\xef\x11\xbf\x23\x48\xe2\x88\x57\xc0\x60\x53\x08\xe8\x61\x44\x1e\x46\xbe\x10\x7f\xe2\xcb\xdf\xea\x82\xb6\x44\x65\xa7\x35\xee\xe3\x5e\x6d\xbb\xa3\x32\x8c\xbd\xdd\x3f\xbf\x33\x98\xd8\x2f\x77\x3b\x1c\xff\x9c\x37\x7b\x7a\x04\x48\x84\xc0\xe7\xfb\x21\x02\x9f\xb3\xc5\xd1\xad\x58\xd3\x0f\xe6\x8d\x4f\xc3\x8c\x84\xf3\x94\xff\xa1\x60\x4b\xfd\x09\x1a\x91\x34\x37\xe8\xb6\x50\x4f\x29\x14\x88\x4f\x4a\x3f\x24\x4a\x07\x61\x7e\xc1\x0c\x44\x25\x03\xdf\x28\x9c\x8f\x9b\x47\x40\x75\x56\x55\x87\xde\xf0\x02\x47\x78\xa3\x0a\x4e\x27\xbf\x7c\xfe\x9c\xfd\x60\x1e\xae\xd3\x66\x94\x71\xce\x08\xdd\xff\xcb\x99\x0c\xc2\x99\xef\x37\x77\x90\xda\x3f\x40\x42\xaf\x07\x7d\x6f\x9f\x05\x68\x58\x08\x89\xbc\xf9\x32\x50\x15\x27\x82\x4a\x12\x0e\x20\x84\x82\x24\xe6\xe7\x4a\x55\x34\x90\x06\xf3\x2c\x59\x65\x38\xc4\x9b\xb5\xfa\x3b\xf8\x22\x95\x6e\x98\xd1\x69\x26\xb8\xc3\x7e\xb7\x9a\x55\x26\xf7\xf3\xf0\x88\xbd\xba\x69\x3b\x75\x6a\x97\x3d\x86\x8b\x48\x29\x50\x85\xd9\xee\x27\xf3\xcc\xf1\xe6\x1e\x3e\x4d\xe7\xc9\xe0\x43\x04\x13\x11\x39\x0a\xb1\xe2\x6c\x06\xd8\xc2\x62\x38\x26\x5d\x1b\x7f\x1a\x54\x7d\x70\x06\x98\x8d\x26\xc2\x8b\xda\xe6\x5f\x01\x90\x2d\x69\xea\xde\x4f\xc9\x10\x50\xaa\x8d\x45\x42\xe7\x04\xc4\xbf\x66\xb2\x70\xd0\xf2\x3c\xff\x2e\xbf\x23\x01\x50\x24\x73\xd1\x98\xd6\x85\x5f\xf0\x92\x6d\x2b\xeb\x24\xcc\xcd\xca\xbf\x43\x32\x28\x6e\xd9\x7f\x84\xed\xa0\xf4\xd0\xb8\xbc\xdd\xec\xc2\xf0\x43\x36\x88\xae\xb8\xa4\x4e\x0e\xb0\xbf\x89\xcf\xd1\xf6\xe5\x0a\xfb\xb5\xc3\xcc\x97\x48\x2d\x64\xae\x85\x31\x78\xb4\x31\x32\x75\xe0\x08\x07\xae\x9a\xf0\x03\xd6\x31\x55\x33\x37\xe0\x7a\x74\xf0\xec\xe8\x6e\xb4\x2a\xe0\x0a\x67\xb7\x2f\xa0\xdd\x09\x2e\xe1\x07\x44\x4d\xb2\x9a\xe3\xf9\xd2\x4c\x02\xfb\x67\xc6\x70\xfb\x05\x4c\xc6\x4f\x80\xa1\x41\x40\x68\xab\x38\xce\xc5\x25\xc3\xd0\xac\xd3\xe0\xe3\x6a\x1b\x18\xc2\x8d\xc1\xf0\x57\x96\x3d\xe4\xc2\xd7\xd7\x71\x39\x58\xa9\x3b\xcb\x2c\xc5\x98\x93\x8b\x81\x53\x0b\x3c\xbf\x13\xff\x00\xfd\x18\x11\x92\x07\x53\x1c\x1d\x0f\xc5\x91\x46\x30\xd8\xd3\x35\x34\x53\x62\x20\x86\x08\x43\x0a\x51\x96\x5c\x73\x69\x61\x21\x02\xa8\x7d\xbf\xa6\x53\x8e\xc3\x9a\xde\xf4\xae\x9a\x35\xc4\xbc\xa7\xe6\x37\x51\x1f\x29\xeb\xad\xef\xab\x6c\x21\xe8\x8d\xd2\xfb\xbe\x2e\xf9\x0f\x95\xf8\x12\xee\x76\xcd\xf2\x7a\x73\x11\xdd\x5a\xcd\x47\x59\xfe\xad\x31\xd3\x14\x45\x0b\x10\xdd\x6d\xfc\x79\x0b\xea\xf0\x30\x34\x0f\xd1\xb9\x3b\x45\xd9\x0b\x0e\x70\x63\x0d\x81\x05\xba\xe5\xb5\xda\x71\x54\x79\x0f\x04\xaf\x3b\x1a\x2e\x97\x19\xb9\x6d\x60\xbb\xcd\x36\xb4\x05\x9b\xa6\x27\xc9\x7e\x7b\x97\xdc\x72\xdc\xe2\x2e\xde\x2f\x77\x93\x04\xde\x5f\x9b\x2f\xca\xc2\x55\x6c\x2c\xc5\x2b\xf7\x68\x32\xff\xdc\x3f\xb6\x41\xf9\xf1\x23\xe2\x0a\x99\xf6\x32\x09\xe2\x30\x89\x15\x7c\x07\x14\xcb\xdd\xae\xd5\x71\xd0\x78\x63\x0b\x60\x7b\x04\x5e\x05\x22\xbd\x9f\x2f\x9e\x2d\xef\xeb\xbb\xff\x08\x86\x4f\x50\xde\x24\x8d\xb3\x75\x77\xd0\x78\x4c\x24\x07\x95\x24\xe8\xcc\x8b\x76\xee\xd1\x37\xd1\xf1\xfb\xe4\x54\x1c\x90\xe0\xeb\x71\xa1\x70\x97\x65\x90\x76\xc4\x86\x3e\x6c\xb3\xe1\xb2\xa0\xa1\xca\x8b\x0f\xdf\x8f\xc2\x85\x00\xbe\x8e\x8f\x46\x48\x2e\xe5\x4e\x68\x25\x69\xd7\x50\xe0\x93\xfa\xc8\xc3\xb6\xdb\xf6\xda\x6f\x28\x10\xcd\x9a\xd9\xae\x47\x02\x35\x60\x65\xb9\x2e\xd9\x92\xbf\xec\xdb\xef\x73\xdc\xe6\x2b\xbf\xcd\x4e\xc1\xb0\x67\xd8\x28\x77\xe6\xa6\x24\xfd\xd8\x24\xfa\x98\xba\x7b\x85\x35\x48\x3d\xa6\x4f\x50\xf7\xdf\x00\x00\x00\xff\xff\x9a\xb3\x11\x29\x04\x0d\x00\x00")

func sushibox_go_bytes() ([]byte, error) {
	return bindata_read(
		_sushibox_go,
		"sushibox.go",
	)
}

func sushibox_go() (*asset, error) {
	bytes, err := sushibox_go_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "sushibox.go", size: 3332, mode: os.FileMode(420), modTime: time.Unix(1418097391, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _version_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\xce\xcf\x2b\x2e\x51\x08\x4b\x2d\x2a\xce\xcc\xcf\x53\xb0\x55\x50\x4a\x49\x2d\x4b\xcd\xc9\x2f\xc8\xcc\x4b\x57\xe2\x02\x04\x00\x00\xff\xff\x21\xcf\xe4\x49\x2b\x00\x00\x00")

func version_go_bytes() ([]byte, error) {
	return bindata_read(
		_version_go,
		"version.go",
	)
}

func version_go() (*asset, error) {
	bytes, err := version_go_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "version.go", size: 43, mode: os.FileMode(420), modTime: time.Unix(1418090591, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sushibox.go": sushibox_go,
	"version.go": version_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"sushibox.go": &_bintree_t{sushibox_go, map[string]*_bintree_t{
	}},
	"version.go": &_bintree_t{version_go, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

