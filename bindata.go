package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _sushibox_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x82\x15\x60\x80\x6e\x5c\x25\x7b\x58\x14\x70\xe1\x43\xd2\x64\x81\x14\xd8\x45\x90\x6c\x7b\xc9\x06\x01\x23\x51\x36\x11\x89\x14\x48\x5a\xcd\x36\xf0\x7f\xef\x0c\x49\x49\x54\x60\x2f\x9c\xbd\x44\x21\xf9\xe6\xcd\x70\x3e\x1e\xdd\xb2\xe2\x99\xad\x39\x69\x98\x90\x69\x2a\x9a\x56\x69\x4b\x68\x9a\x64\x55\xcd\xd6\x19\x7e\x1b\x0b\x9f\x8d\x6a\x78\x29\x34\xc9\xd6\xc2\x6e\xb6\x4f\x79\xa1\x9a\xd3\x46\xd8\x62\xc3\xeb\x7a\x73\xba\x56\xbf\x05\x00\x5a\x08\x75\x2a\xd4\xd6\x8a\x1a\x17\xca\xe0\xdf\x96\xd9\xcd\x69\x25\x6a\x8e\xff\xe0\x86\xf9\x6e\x0a\x56\x03\x62\x9e\xa6\x1d\xd3\xe4\x6e\x6b\x36\xe2\x42\xbd\x5c\x82\x8f\x15\xc9\x72\x83\xeb\x27\xf5\x92\xb9\xd3\x7f\xb8\x36\x42\x49\x13\x4e\xbb\xb0\xcc\xbc\xed\x05\x33\xdc\x9f\x04\x9c\xdf\x15\x32\xc0\x9f\x84\x04\x64\xb5\x95\x85\xbb\x25\x9d\x93\xd7\x34\x11\x15\xe1\x5a\x93\xe5\x8a\x08\x29\x2c\x20\x0d\x9d\xff\xe1\xb6\x7e\x59\x11\x29\x6a\xc4\x24\xb0\x54\xfa\xea\x45\x58\x9a\xf5\x28\x52\x31\xb8\x46\x49\x9e\xbe\x93\xd9\x49\x97\x2d\xd0\x64\x9e\x26\xbb\x34\x4d\x8a\xa6\x5c\x10\xa6\xd7\x06\x59\x5b\xa6\x0d\x3f\x87\x05\x85\x1b\x46\xde\x20\x63\xc5\xf3\x27\xa0\x30\xd7\xb2\x52\x7b\x7c\x06\xe8\x8a\x68\x6e\xac\xd2\xdc\x61\xf7\xe0\xe2\xe0\x62\xe8\x81\x00\x21\x42\x17\xe4\x18\x09\x7f\xe1\xc5\x9f\x4d\x49\x87\xb0\x7f\x78\xff\x80\x3e\x78\xfd\x5d\xc8\xf0\x98\x4d\xe2\xac\x91\x27\xf4\xc6\xa2\xf7\x1c\xd6\x39\xe0\x20\x3b\x7d\x48\x91\x5f\xcd\xed\x56\x4b\xdc\x45\xea\x64\xda\x1c\x7d\x1b\xe5\x7f\x29\x28\xe6\xc0\x1d\x81\x80\xd3\xa7\x50\x99\xfc\xf3\x33\x9c\x9e\xd7\x35\x8d\xce\x17\x78\x80\xc9\xfa\xac\x4a\x4e\xcf\x7e\xff\xf8\x71\x7e\x4c\x18\xd3\x2e\x9c\x86\x31\x61\x8f\x80\x7b\x43\x89\xce\x7f\x2e\x94\x34\x19\x7b\x7e\x1a\xc7\x84\x3a\x80\x80\x70\x18\x86\x29\x3a\x00\x16\x61\x58\x00\x18\xfc\x80\xdb\xa1\xa2\x51\x27\x13\x6c\x16\x62\xac\x16\x72\x1d\x5a\xfd\xfe\xc1\x2f\xdd\x50\xe1\x69\xe4\x03\xe9\x29\xdc\x0f\x8d\xef\xcf\x1e\x70\x10\x50\x55\xf2\xbf\x0d\x2a\x0e\x00\x81\xde\x4f\x63\x02\x2a\x93\xdf\x00\x8f\xad\x68\xe6\x8e\x97\x64\x06\xe4\xaa\xb5\x78\x9b\x87\x6f\xf2\x9b\x84\x66\x03\x7e\x6c\x65\x47\xe2\xd0\x97\xbc\x62\xdb\xda\xe2\x90\x61\x85\x70\xee\x83\x38\x20\x3d\xc2\x2e\x94\xaa\x69\xaf\x18\x40\x51\xb1\xda\xf0\x05\xc9\xcc\x46\xfd\xdb\x63\xb3\x21\xb2\x1b\xbc\x2b\x92\xb9\xbb\x05\x8a\x78\x8a\x7f\xed\xe9\xdf\x06\x3d\x33\x2e\xc2\x90\x7f\x8c\x12\x2e\xee\x46\xe7\x6c\x3e\x4c\x9e\xcb\x0f\x28\xd2\xa0\x6e\x8e\x66\xd4\x8d\x95\xfb\x40\xaa\xfc\xfa\xfe\xc3\xf2\xc1\xdb\xfa\xb2\x0c\x25\x79\x2b\x22\xe3\xa8\x55\xf0\x79\x5c\x10\xc9\x1a\x8e\x93\xa6\x99\x84\x4c\x9f\x1b\xc3\xed\x17\xd8\x32\x21\xdb\x0c\x37\x04\x98\x0e\x23\xe9\x20\x8e\x0c\x4d\xe7\xa3\x0e\xc5\x8a\x13\x37\xa1\x0b\x2b\xc1\x32\xa3\xf9\x81\xb6\xea\xb9\xf0\xf8\x3a\x76\x07\xb9\xb9\xb3\xcc\x52\xb4\x39\xda\x19\x80\x86\xc0\xf3\x3b\xf1\x1f\x14\x0a\x2d\x7a\xf2\x7e\x2b\xb6\xc6\x0a\x5d\x61\x6e\xa0\x42\x2e\x69\x04\x8d\x43\xba\x66\x66\x49\x0c\xd8\x10\x61\x48\x29\xaa\x8a\x6b\x2e\x2d\xd4\xb0\x0f\x6a\xf7\xd6\xa7\x9b\xd1\xa9\xcf\xb0\xf5\x2e\x9f\x0d\xd8\xbc\xc7\xe7\x57\xd1\xec\x71\x1b\x76\xdf\xe7\xd9\x82\xd1\x0f\x5c\xef\xf6\x0a\xc0\xf4\x21\x1a\x7b\xcd\xf2\xa6\xbd\x8c\x64\xdd\x3f\xfa\xf9\x57\xbf\x4d\x33\x9c\x36\x88\xe8\xae\x0d\x23\xd2\x77\xfd\xe3\xcc\x3c\x46\xa3\x72\x8c\xf4\x96\x1c\xc2\x8d\xf5\x02\x1a\xe8\x96\x37\xaa\xe3\xa8\xa7\x21\x10\x9c\x33\x37\xa7\x5e\x71\x6f\x7d\xd8\xae\xb3\x0d\x1d\x82\xcd\xb2\xa3\x04\x76\x50\xed\x5b\x8e\x5d\x3c\xda\x8f\xa2\x0a\x24\x70\x7e\x6d\xbe\x28\x0b\x83\x6e\x2c\xc5\xb7\x70\x2f\x59\x58\xbf\x1d\xdb\x21\xc3\xd1\x53\x7c\x48\x5d\x87\xac\x03\xe6\x66\xff\xd4\x39\x0d\xef\x45\x12\xcc\x3b\xc4\xb0\xb6\xe5\xb2\xa4\x3d\xd1\x6b\x30\xdf\x79\x07\x79\x9e\xe3\x0b\x25\xbb\x2e\x4c\xe5\x95\xec\x84\x56\x92\x8e\x4f\x41\xf8\xa5\x06\x5a\xc6\x0b\x1a\xac\x9d\x71\x07\x85\x07\xc3\xe8\x16\xc3\xaf\x05\x50\xa1\x86\xd9\xf1\x2a\x04\xfc\x40\x0f\x70\x5d\xb1\x82\xbf\xee\x5c\x92\xb0\x35\x3e\x85\xd6\x70\x72\x50\x82\x3d\x94\xc7\x35\xf0\x92\x64\x27\x9e\xe4\x24\x73\xba\xca\x7c\xa4\xbd\xa6\x7e\x40\xaf\xff\x07\x00\x00\xff\xff\xa4\x08\x99\x4a\xbb\x0a\x00\x00")

func sushibox_go() ([]byte, error) {
	return bindata_read(
		_sushibox_go,
		"sushibox.go",
	)
}

var _version_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\xce\xcf\x2b\x2e\x51\x08\x4b\x2d\x2a\xce\xcc\xcf\x53\xb0\x55\x50\x4a\x49\x2d\x4b\xcd\xc9\x2f\xc8\xcc\x4b\x57\xe2\x02\x04\x00\x00\xff\xff\x21\xcf\xe4\x49\x2b\x00\x00\x00")

func version_go() ([]byte, error) {
	return bindata_read(
		_version_go,
		"version.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"sushibox.go": sushibox_go,
	"version.go": version_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"sushibox.go": &_bintree_t{sushibox_go, map[string]*_bintree_t{
	}},
	"version.go": &_bintree_t{version_go, map[string]*_bintree_t{
	}},
}}
