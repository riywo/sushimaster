package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _sushibox_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x41\x6f\xdb\x3a\x0c\x3e\xdb\xbf\x42\xcf\x40\x01\x05\xc8\x73\xfa\x0e\xc5\x03\x32\xe4\xd0\xae\x19\xd0\x01\x2d\x8a\xa6\xdb\xa5\x0d\x0a\xd5\x91\x13\xa1\xb6\x64\x48\x8a\x91\xad\xc8\x7f\x1f\x29\xcb\xb6\x5c\xa4\x5b\xba\xcb\x32\x91\x1f\x3f\x7e\xa2\x48\xba\x15\xcb\x5e\xd8\x9a\x93\x92\x09\x19\xc7\xa2\xac\x94\xb6\x84\xc6\x51\x92\x17\x6c\x9d\xe0\x6f\x69\xe1\x67\xa3\x4a\xbe\x12\x9a\x24\x6b\x61\x37\xdb\xe7\x34\x53\xe5\xa4\x14\x36\xdb\xf0\xa2\xd8\x4c\xd6\xea\x5f\x0f\xc0\x08\xa1\x26\x42\x6d\xad\x28\xf0\xa0\x0c\xfe\x5b\x31\xbb\x99\xe4\xa2\xe0\xf8\x1f\x34\x98\x1f\x26\x63\x05\x20\x46\x71\x5c\x33\x4d\x16\x5b\xb3\x11\x17\x6a\x77\x09\x39\x66\x24\x49\x0d\x9e\x9f\xd5\x2e\x71\xde\xef\x5c\x1b\xa1\xa4\xf1\xde\xda\x1f\x93\x26\xf6\x82\x19\xde\x78\x3c\xae\xb1\x0a\xe9\xe1\xcf\x42\x02\x32\xdf\xca\xcc\xdd\x92\x8e\xc8\x6b\x1c\x89\x9c\x70\xad\xc9\x74\x46\x84\x14\x16\x90\x86\x8e\x3e\x39\xd3\x3f\x33\x22\x45\x81\x98\xa8\x62\x52\x64\x14\x8c\xa3\x38\xda\xc7\x71\x94\x95\xab\x31\x61\x7a\x6d\x30\xae\x62\xda\xf0\x73\x38\x50\xb8\x43\xc0\x07\x35\xc9\x5e\xbe\xc0\x5d\xcd\x95\xcc\xd5\x01\x56\x0f\x9d\x11\xcd\x8d\x55\x9a\x3b\xec\x01\xdc\x20\x3d\xe4\x77\x12\xfa\x3c\x7c\xc7\xb3\xcf\xe5\x8a\x76\xa2\xfe\xa4\x7f\xef\x8b\xd0\x5f\x18\xf1\x4a\x23\xd4\x3f\xdf\xb8\x25\xf7\xe7\x14\x70\x70\xbd\x36\x6b\x40\xad\xb9\xdd\x6a\x89\x56\xa4\x8e\x86\xef\xd7\xbe\x74\xfa\x55\x41\xbd\x3b\xee\x00\x04\x9c\x4d\x0d\x94\x49\xaf\x5f\xc0\x7b\x5e\x14\x34\xf0\x8f\xd1\x81\x85\xb9\x56\x2b\x4e\x4f\xff\x3f\x3b\x1b\x1d\x23\x63\xd8\x28\x43\x19\x03\xf6\x00\x78\x50\x4a\xe0\xff\x3b\x29\x71\xd4\xb7\xe5\x50\xc7\x80\xda\x83\x80\xb0\xeb\xd7\x21\xda\x03\xc6\xbe\x9f\x01\xe8\xf3\x40\xda\xee\x45\x83\x56\x24\xd8\x0f\xc4\x58\x2d\xe4\xda\xf7\xea\xc3\xb2\x39\xba\xbe\x47\x6f\x90\x03\xe9\x29\xdc\x0f\x83\x1f\x4e\x97\xd8\xc9\x38\xf8\xe9\x37\x83\x4b\x01\x80\x40\xdf\x0c\x4c\x04\x8b\x20\xbd\x05\x1e\x9b\xd3\xc4\xb9\xa7\xe4\x04\xc8\x55\x65\xf1\x36\xcb\x47\xf9\x28\x93\x31\x01\x7e\xec\x56\x47\xe2\xd0\x97\x3c\x67\xdb\xc2\xe2\x94\xb8\xb2\x34\x1e\x14\x8c\x16\x27\x10\xd2\xa0\x31\x9c\x25\x27\x13\x66\xb7\xdb\x03\x4e\x42\x3f\x7f\x33\xf7\x03\x8a\x9b\xf3\xc3\x7f\xd3\x65\x43\xdf\x54\xa7\xab\xcc\xdb\x61\xec\x3b\x3e\x87\x9f\xa7\x31\x91\xac\xe4\xd8\xf0\x9a\x49\xb8\xf0\xb9\x31\xdc\xde\x80\xc9\xf8\x4b\x33\x34\x08\x08\xed\x26\xc3\x41\x1c\x19\x86\x8e\xfa\x79\x0e\x27\x37\xec\x05\x27\x2b\xc2\x6a\x63\xf8\x3b\xaf\xdb\x72\xa1\xfb\x2a\x4c\x07\x6f\xb3\xb0\xcc\x52\x8c\x39\x3a\x19\x80\x3a\xe1\xe9\x42\xfc\x84\x52\x63\x44\x4b\xde\x9a\xc2\x68\x7c\xdd\x39\xd6\x06\x5e\xd7\x15\x8d\x60\xb0\x2f\xd7\x89\x99\x12\x03\x31\x44\x18\xb2\x12\x79\xce\x35\x97\x16\x1e\xbb\x15\xb5\x7f\x9b\xd3\x8d\xca\x30\xa7\x37\x7d\x28\x67\x09\x31\x1f\xc9\x79\x2f\xca\x03\x69\xbd\xf5\x63\x99\x2d\x04\xfd\x26\xf5\xfe\xe0\x1c\x0e\x17\x7a\xdf\x6b\x96\x97\xd5\x65\xb0\x5d\x9b\xcf\x63\x7a\xdf\x98\x69\x02\xdc\xa8\x68\x51\xf9\xf1\x6a\xbb\xfe\xe9\xc4\x3c\x25\xdd\xb2\x3a\x6a\x03\xae\x38\xc8\x0d\xc7\x16\x1a\xe8\x8e\x97\xaa\xe6\xb8\xd6\xbc\x10\x1c\x45\x37\x69\xcd\xe2\xbb\x6b\x64\xbb\xce\x36\xb4\x13\x9b\x24\x47\xed\xb9\x6e\x79\xde\x71\xec\xe2\x3e\xbe\xdf\x6d\x40\x02\xfe\x2b\x73\xa3\xec\x7c\x27\x8c\x75\x9f\xa4\x83\x64\xfe\xfc\x76\x6c\xbb\x0a\x07\x1f\xbd\xf7\x96\x5c\x57\x75\xc0\xdc\x1e\x9e\x3a\xb7\x4a\xdb\x5d\x05\xe1\x35\x62\x58\x55\x71\xb9\xa2\x2d\xd1\xab\x0f\xdf\x37\x09\xd2\x34\xc5\x0f\x85\xac\x6b\x3f\x95\x73\x59\x0b\xad\x24\xed\x37\xb2\xff\x9b\x26\x9d\x83\x46\xea\xa3\x5d\x70\x0d\x0f\x0f\x81\x78\x8b\x5f\x01\x00\x00\xff\xff\x8b\xad\xa1\xf0\x6f\x09\x00\x00")

func sushibox_go() ([]byte, error) {
	return bindata_read(
		_sushibox_go,
		"sushibox.go",
	)
}

var _version_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\xce\xcf\x2b\x2e\x51\x08\x4b\x2d\x2a\xce\xcc\xcf\x53\xb0\x55\x50\x4a\x49\x2d\x4b\xcd\xc9\x2f\xc8\xcc\x4b\x57\xe2\x02\x04\x00\x00\xff\xff\x21\xcf\xe4\x49\x2b\x00\x00\x00")

func version_go() ([]byte, error) {
	return bindata_read(
		_version_go,
		"version.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"sushibox.go": sushibox_go,
	"version.go": version_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"sushibox.go": &_bintree_t{sushibox_go, map[string]*_bintree_t{
	}},
	"version.go": &_bintree_t{version_go, map[string]*_bintree_t{
	}},
}}
